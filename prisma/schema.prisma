
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  boards    BoardMember[]
  tasks     Task[]
  comments  Comment[]
  activityLogs ActivityLog[]

  @@map("users")
}

model Board {
  id          String   @id @default(cuid())
  title       String
  description String?
  color       String   @default("#3B82F6")
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members    BoardMember[]
  columns    Column[]
  activityLogs ActivityLog[]

  @@map("boards")
}

model BoardMember {
  id      String @id @default(cuid())
  role    Role   @default(MEMBER)
  joinedAt DateTime @default(now())

  // Relations
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@unique([userId, boardId])
  @@map("board_members")
}

model Column {
  id       String @id @default(cuid())
  title    String
  order    Int
  color    String @default("#6B7280")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks   Task[]

  @@map("columns")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  priority    Priority   @default(MEDIUM)
  status      TaskStatus @default(TODO)
  dueDate     DateTime?
  order       Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  columnId String
  column   Column @relation(fields: [columnId], references: [id], onDelete: Cascade)
  assigneeId String?
  assignee   User?  @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  comments   Comment[]
  activityLogs ActivityLog[]

  @@map("tasks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model ActivityLog {
  id        String   @id @default(cuid())
  type      ActivityType
  description  String
  metadata     Json?
  createdAt DateTime @default(now())

  userId String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId String?
  task   Task?   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  boardId String?
  board   Board?  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}

enum ActivityType {
  TASK_CREATED
  TASK_UPDATED
  TASK_MOVED
  TASK_ASSIGNED
  TASK_COMPLETED
  TASK_DELETED
  COMMENT_ADDED
  BOARD_CREATED
  MEMBER_ADDED
  MEMBER_REMOVED
}



enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}
